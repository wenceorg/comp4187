<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on COMP4187 – Parallel Scientific Computing II</title><link>https://teaching.wence.uk/comp4187/</link><description>Recent content in Introduction on COMP4187 – Parallel Scientific Computing II</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://teaching.wence.uk/comp4187/index.xml" rel="self" type="application/rss+xml"/><item><title>Jupyter</title><link>https://teaching.wence.uk/comp4187/setup/jupyter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/setup/jupyter/</guid><description>Running the notebooks # To install the necessary software, I recommend doing so in a Python virtual environment. We need Python3. Doing something like:
$ python3 -m venv sci-comp $ . sci-comp/bin/activate # Or other script if you use a different shell $ pip install numpy scipy pandas ipython jupyter $ cd path/to/repo/material $ jupyter notebook Will pop up a browser window.
If this results in an AssertionError (see https://github.</description></item><item><title>Parallel Hello World</title><link>https://teaching.wence.uk/comp4187/exercises/parallel/hello/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/parallel/hello/</guid><description>Hello, World! # Every programming course has to start with &amp;ldquo;hello world&amp;rdquo;, this is no exception. The goal of this is to familiarise you with compiling and running code using MPI, the parallel library we&amp;rsquo;ll be using, either on Hamilton, or your own machine. So take a look at the setup guide if you haven&amp;rsquo;t already.
A Python version # MPI is a specification for a library-based programming model.</description></item><item><title>Point-to-point messaging in MPI</title><link>https://teaching.wence.uk/comp4187/lectures/mpi/point-to-point/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/mpi/point-to-point/</guid><description>Pairwise message exchange # The simplest form of communication in MPI is a pairwise exchange of a message between two processes.
In MPI, communication via messages is two-sided1. That is, for every message one process sends, there must be a matching receive call by another process.
Cartoon of sending a message between two processes
We need to fill in some details
How will we describe &amp;ldquo;data&amp;rdquo; How will we identify processes How will the receiver know which message to put where?</description></item><item><title>Calculating π</title><link>https://teaching.wence.uk/comp4187/exercises/parallel/pi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/parallel/pi/</guid><description>Simple MPI parallelism # In this exercise we&amp;rsquo;re going to compute an approximation to the value of π using a simple Monte Carlo method. We do this by noticing that if we randomly throw darts at a square, the fraction of the time they will fall within the incircle approaches π.
Consider a square with side-length $2r$ and an inscribed circle with radius $r$.
Square with inscribed circle</description></item><item><title>Coarse Grid Operator</title><link>https://teaching.wence.uk/comp4187/exercises/coarse-grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/coarse-grid/</guid><description>Constructing a coarse grid operator # We consider the discrete Poisson system with Dirichlet boundary conditions and 7 grid points, $$\frac{-u_{i-1} + 2 u_i - u_{i+1}}{h^2} = f_i, i=1\dots 5$$ $$u_0 = u_6 = 1, \text{(inhomogeneous)}$$ where the mesh size is $h:=\frac{1}{6}$.
Formulate the system of equations in matrix form, i.e. $A_h u = b_h$. Take care with the boundary conditions. Define a linear mapping $R: \mathbb{R}^5 \rightarrow \mathbb{R}^2$ according to the full weighting scheme.</description></item><item><title>Finite Differences</title><link>https://teaching.wence.uk/comp4187/exercises/finite-differences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/finite-differences/</guid><description>Finite Differences # Consider the one-dimensional Poisson equation with homogeneous Dirichlet conditions $$-\frac{d^2 u}{d x^2}=f(x),~~~x\in(0,1)$$ with Dirichlet boundary conditions $$u(0)=u(1) = 0.$$
Discretise the Poisson equation by finite differences using an equidistant mesh size $h=1/N$ and $N+1$ grid points. Write the finite difference approximation from 1. in matrix-vector form $Au=b$. Therefore, define the entries of the matrix $A\in\mathbb{R}^{N+1\times N+1}$. Write the finite difference approximation as $Au=b$, where $A\in\mathbb{R}^{N-1\times N-1}$ and $b\in\mathbb{R}^{N-1}$, by substituting the values for $u(0)$ and $u(1)$.</description></item><item><title>Lecture 1: Time-stepping</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture1/</guid><description>Lecture 1 # The jupyter notebook containing the lecture content can be found at:
ipython notebook
I have been informed by CIS that the room was stil being set up when we used it, as a result the encore recording does not have sound. This should be fixed for future lectures. For this one the extensive notes included in the jupyter notebook will hopefully be sufficient. Any questions just ask by email or in the next lecture.</description></item><item><title>Lecture 2: Time-stepping</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture2/</guid><description>Lecture 2 # The jupyter notebook containing the lecture content can be found at:
ipython notebook
The video is now available at: video
We haven&amp;rsquo;t gotten all the way through this notebook yet so we&amp;rsquo;ll keep at it next week.</description></item><item><title>Lecture 3: Time-stepping</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture3/</guid><description>Lecture 2 # The jupyter notebook containing the lecture content can be found at:
ipython notebook
We have also begun on a new one, which is at: ipython notebook
The video is now available at: video
Next week we will start looking at spatial discretisations and how to combine time and space discretisation.</description></item><item><title>Lecture 4: Finite Differences</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture4/</guid><description>Lecture 4 # The jupyter notebook containing the lecture content can be found at: ipython notebook
The video is now available at: video</description></item><item><title>Lecture 5: Finite Differences</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture5/</guid><description>Lecture 5 # The jupyter notebook containing the lecture content can be found at: ipython notebook
The video is now available at: video
Coursework Q&amp;amp;A #</description></item><item><title>Lecture 6: Finite Differences</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture6/</guid><description>Lecture 6 # The jupyter notebook containing the lecture content can be found at: ipython notebook
The video is now available at: video
Whiteboard #</description></item><item><title>Lecture 7: Linear Solvers</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture7/</guid><description>Lecture 7 # The jupyter notebook containing the lecture content can be found at: ipython notebook ipython notebook
If you are interested in some of the applications of the technique you might also be interested in: ipython notebook
The video is now available at: video</description></item><item><title>Lecture 8: Linear Solvers</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture8/</guid><description>Lecture 8 # The jupyter notebook containing the lecture content can be found at: ipython notebook
In order to more fully understand the frequency analysis solve the exercise listed as finite-differences. The solution can be found here: ipython notebook
The video is now available at: video</description></item><item><title>Lecture 9: Multigrid</title><link>https://teaching.wence.uk/comp4187/lectures/numerics/lecture9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/numerics/lecture9/</guid><description>Lecture 9 # The jupyter notebook containing the lecture content can be found at: ipython notebook This notebook contains some material not covered in the lecture.
The video is now available at: video</description></item><item><title>MPI</title><link>https://teaching.wence.uk/comp4187/setup/mpi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/setup/mpi/</guid><description>Options for running MPI programs # For the larger parallel runs in the course, and benchmarking, we will use the Hamilton cluster. You may wish to do development on your own machine. I provide some brief guidance on what you need in terms of appropriate compilers and MPI implementations.
Hamilton access and quickstart # If you don&amp;rsquo;t already have an account on Hamilton, please register for one by following their instructions.</description></item><item><title>Non-blocking point-to-point messaging</title><link>https://teaching.wence.uk/comp4187/lectures/mpi/point-to-point-nb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/mpi/point-to-point-nb/</guid><description>Non-blocking messages # As well as the blocking point to point messaging we saw last time, MPI also offers non-blocking versions.
These functions all return immediately, and provide a &amp;ldquo;request&amp;rdquo; object that we can then either wait for completion with or inspect to check if the message has been sent/received.
The function signatures for MPI_Isend and MPI_Irecv are:
int MPI_Isend(const void *buffer, int count, MPI_Datatype dtype, int dest, int tag, MPI_Comm comm, MPI_Request *request); int MPI_Irecv(void *buffer, int count, MPI_Datatype dtype, int dest, int tag, MPI_Comm comm, MPI_Request *request); The mpi4py versions are:</description></item><item><title>Term 1: numerics</title><link>https://teaching.wence.uk/comp4187/past-editions/2020-21/term1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/past-editions/2020-21/term1/</guid><description>Lecture 1: finite differences # The lecture will take place over zoom. A calender invite is available on duo. The zoom invite can also be found at info).
Before the lecture it would be good if you can download the ipython notebook and run it. You can see jupyter for instructions on how to run the notebook.
Alternatively, you can run the notebook online without installing python.
finite-differences After the lecture a video recording has been placed on duo.</description></item><item><title>Term 2: parallel computing</title><link>https://teaching.wence.uk/comp4187/past-editions/2020-21/term2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/past-editions/2020-21/term2/</guid><description>Lecture scribblings and video links # Links to the videos should be accessible with a Durham account registered on the course in 2020/21.
2021-01-13: Scribbles, video, code
2021-01-20: Scribbles, video
About half way through when I wrote down the efficiency for weak scaling I simplified $\frac{T_1}{T_1 + \mathcal{o}(p)T_1}$ to $\frac{T_1}{1 + \mathcal{o}(p)}$. The correct efficiency for weak scaling is $$ \eta_p = \frac{1}{1 + \mathcal{o}(p)}, $$ the correct expressions for $\eta_p^{\text{fix}}$ and $\eta_p^{\text{log}}$ are therefore</description></item><item><title>Two-Grid Iteration</title><link>https://teaching.wence.uk/comp4187/exercises/two-grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/two-grid/</guid><description>Fourier Analysis for Two-Grid Iteration # You can find the exercise in the following ipython notebook: ipython notebook</description></item><item><title>1-D domain decomposition</title><link>https://teaching.wence.uk/comp4187/exercises/parallel/domain-decomp-simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/parallel/domain-decomp-simple/</guid><description>Domain decomposition and data parallelism # In this exercise, we&amp;rsquo;re going to look at some of the implementation steps involved in domain-decomposing a finite difference computation.
The particular case we are going to consider is that of edge detection in grayscale images, and subsequent reconstruction of the original image from the detected eges.
Introduction and background # A particularly simple way of detecting the edges in an image is to convolve it with a Laplacian kernel.</description></item><item><title>Collectives</title><link>https://teaching.wence.uk/comp4187/lectures/mpi/collectives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/mpi/collectives/</guid><description>Collective communication # Point-to-point messages are sufficient to write all the parallel algorithms we might want. However, they might not necessarily be the most efficient.
As motivation, let&amp;rsquo;s think about the time we would expect a reduction (combination of values) to take if we send messages in a 1-D ring of processes.
Recall from the ping-pong exercise that our model for the length of time it takes to send a message with $B$ bytes is</description></item><item><title>Coursework 1: Euler-Bernoulli Beam Theory</title><link>https://teaching.wence.uk/comp4187/coursework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/coursework/</guid><description>A 1D Euler-Bernoulii Beam # The submission deadline for this work is November 4th.
This coursework is worth 20% of the total mark for the module.
You can accept the assignment on github classroom
See below for submission details.
Introduction # In this coursework, we&amp;rsquo;re going to implement an Euler-Bernoulli beam in 1D. Euler–Bernoulli beam theory, sometimes known as classical beam theory, is a model for calculating the load-bearing behaviour of a beam.</description></item><item><title>Coursework: a 3D multigrid solver</title><link>https://teaching.wence.uk/comp4187/past-editions/2020-21/coursework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/past-editions/2020-21/coursework/</guid><description>A 3D multigrid solver # The submission deadline for this work is 13th May 2021.
See below for submission details.
Updates 2021/03/31 Fixed sign error in forcing term for Part 1. The $f$ needs a minus sign out the front for the exact solution to be a positive product of signs. Fix instructions for obtaining petsc4py on Hamilton. Introduction # In this coursework, we&amp;rsquo;re going to implement a parallel multigrid solver in three dimensions for the variable-coefficient Laplacian.</description></item><item><title>Advanced topics</title><link>https://teaching.wence.uk/comp4187/lectures/mpi/advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/mpi/advanced/</guid><description>Some pointers to more advanced features of MPI # Communicator manipulation # We saw that we can distinguish point-to-point messages by providing different tags, but that there was no such facility for collective operations. Moreover, a collective operation (by definition) involves all the processes in a communicator.
This raises two questions:
How can we have multiple collective operations without them interfering with each other; What if we want a collective operation, but using only a subset of the processes (e.</description></item><item><title>Coursework 2: multigrid solvers</title><link>https://teaching.wence.uk/comp4187/coursework2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/coursework2/</guid><description>A 3D multigrid solver # The submission deadline for this work is 5th May 2022 at 2pm.
You can accept the assignment on github classroom
See below for submission details.
Introduction # In this coursework, we&amp;rsquo;re going to implement a parallel multigrid solver initially in one dimension for the Euler-Bernoulli beam and finally in three dimensions for the variable-coefficient Laplacian.
We are using PETSc, via petsc4py, to provide the parallel data structures.</description></item><item><title>Ping-pong latency</title><link>https://teaching.wence.uk/comp4187/exercises/parallel/pingpong/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/parallel/pingpong/</guid><description>Measuring point-to-point message latency with ping-pong # In this exercise we will write a simple code that does a message ping-pong: sending a message back and forth between two processes.
We can use this to measure both the latency and bandwidth of the network on our supercomputer. Which are both important measurements when we&amp;rsquo;re looking at potential parallel performance: they help us to decide if our code is running slowly because of our bad choices, or limitations in the hardware.</description></item><item><title>PETSc and petsc4py</title><link>https://teaching.wence.uk/comp4187/lectures/mpi/petsc4py/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/mpi/petsc4py/</guid><description>A petsc4py Rosetta stone # PETSc itself has rather good documentation, both of the API and a user manual. The PETSc API has very consistent naming. Objects are created with XXXCreate. Where XXX stands for the object type name. For example, to create a vector (which has type Vec):
Vec v; VecCreate(MPI_COMM_WORLD, &amp;amp;v); To create a matrix (which has type Mat):
Mat m; MatCreate(MPI_COMM_WORLD, &amp;amp;m); In python-land, all object names are the same, and namespaced within the PETSc package.</description></item><item><title>Acknowledgements</title><link>https://teaching.wence.uk/comp4187/acknowledgements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/acknowledgements/</guid><description>Acknowledgements # Most of the course materials have been provided by Lawrence Mitchell.
Some of the material in the time integration notebooks is adapted from Jed Brown&amp;rsquo;s numerical computation class (https://github.com/cucs-numcomp/numcomp-class) under BSD 2-clause license.</description></item><item><title>Term 2: live lecture notes</title><link>https://teaching.wence.uk/comp4187/lectures/mpi/live-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/mpi/live-notes/</guid><description>Lecture slides 2021/22 edition # Slides as produced during the live lectures. Recordings of the live sessions are available if you&amp;rsquo;re appropriately logged in. If you think you should have access but don&amp;rsquo;t, please get in touch.
2022-01-12: Notes, video, code.
Have a go at the hello world exercise which walks through setting up an environment with MPI installed.
2022-01-19: Notes, video.
We had a bit of a palaver with the network being terrible, so sorry to those attending online for the drop out in the second half.</description></item><item><title/><link>https://teaching.wence.uk/comp4187/exercises/norms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/norms/</guid><description>If you find yourself confused by the norms used in the lecture work through this notebook on norms:
ipython notebook</description></item></channel></rss>